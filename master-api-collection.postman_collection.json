{
  "info": {
    "_postman_id": "thrillathon-master-api-collection",
    "name": "Thrillathon Master API Collection",
    "description": "Complete API test suite for the Thrillathon platform including authentication, events, organizers, tickets, AWS S3 uploads, and more.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "description": "Authentication endpoints for user login, registration, and token management",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fullName\": \"Test User\",\n    \"email\": \"testuser@example.com\",\n    \"password\": \"Password123\",\n    \"phone\": \"1234567890\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user"
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.token) {",
                  "    pm.environment.set('userToken', jsonData.token);",
                  "    console.log('✅ User token saved');",
                  "}",
                  "",
                  "if (jsonData.user && jsonData.user._id) {",
                  "    pm.environment.set('userId', jsonData.user._id);",
                  "    console.log('✅ User ID saved: ' + jsonData.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with existing user credentials"
          }
        },
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.token) {",
                  "    pm.environment.set('adminToken', jsonData.token);",
                  "    console.log('✅ Admin token saved');",
                  "}",
                  "",
                  "if (jsonData.user && jsonData.user._id) {",
                  "    pm.environment.set('adminId', jsonData.user._id);",
                  "    console.log('✅ Admin ID saved: ' + jsonData.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with admin credentials"
          }
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "me"]
            },
            "description": "Retrieve user profile data"
          }
        },
        {
          "name": "Generate JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.token) {",
                  "    pm.environment.set('jwt_token', jsonData.token);",
                  "    pm.environment.set('user_id', jsonData.user.userId);",
                  "    console.log('✅ JWT token saved: ' + jsonData.token.substring(0, 20) + '...');",
                  "    console.log('✅ User ID saved: ' + jsonData.user.userId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{test_user_id}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/generate-token",
              "host": ["{{baseUrl}}"],
              "path": ["api", "generate-token"]
            },
            "description": "Generate JWT token for testing AWS S3 functionality"
          }
        }
      ]
    },
    {
      "name": "Events",
      "description": "Endpoints for managing events",
      "item": [
        {
          "name": "Get All Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            },
            "description": "Retrieve all events"
          }
        },
        {
          "name": "Get Event By ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}"]
            },
            "description": "Retrieve a specific event by ID"
          }
        },
        {
          "name": "Create Event (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data._id) {",
                  "    pm.environment.set('eventId', jsonData.data._id);",
                  "    console.log('✅ Event ID saved: ' + jsonData.data._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Event\",\n    \"description\": \"This is a test event\",\n    \"date\": \"2025-09-01T18:00:00.000Z\",\n    \"location\": \"Test Venue\",\n    \"organizer\": \"{{organizerId}}\",\n    \"ticketPrice\": 25,\n    \"maxAttendees\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            },
            "description": "Create a new event (admin only)"
          }
        },
        {
          "name": "Update Event (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Test Event\",\n    \"description\": \"This is an updated test event\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}"]
            },
            "description": "Update an existing event (admin only)"
          }
        },
        {
          "name": "Delete Event (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events", "{{eventId}}"]
            },
            "description": "Delete an event (admin only)"
          }
        }
      ]
    },
    {
      "name": "Organizers",
      "description": "Endpoints for managing organizers",
      "item": [
        {
          "name": "Get All Organizers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/organizers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "organizers"]
            },
            "description": "Retrieve all organizers"
          }
        },
        {
          "name": "Get Organizer By ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/organizers/{{organizerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "organizers", "{{organizerId}}"]
            },
            "description": "Retrieve a specific organizer by ID"
          }
        },
        {
          "name": "Create Organizer (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data._id) {",
                  "    pm.environment.set('organizerId', jsonData.data._id);",
                  "    console.log('✅ Organizer ID saved: ' + jsonData.data._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Organizer\",\n    \"description\": \"This is a test organizer\",\n    \"email\": \"organizer@example.com\",\n    \"phone\": \"9876543210\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/organizers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "organizers"]
            },
            "description": "Create a new organizer (admin only)"
          }
        },
        {
          "name": "Update Organizer (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Test Organizer\",\n    \"description\": \"This is an updated test organizer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/organizers/{{organizerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "organizers", "{{organizerId}}"]
            },
            "description": "Update an existing organizer (admin only)"
          }
        },
        {
          "name": "Delete Organizer (Admin)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/organizers/{{organizerId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "organizers", "{{organizerId}}"]
            },
            "description": "Delete an organizer (admin only)"
          }
        }
      ]
    },
    {
      "name": "Registrations",
      "description": "Endpoints for managing event registrations",
      "item": [
        {
          "name": "Get My Registrations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/registrations/my-registrations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registrations", "my-registrations"]
            },
            "description": "Retrieve all registrations for the logged-in user"
          }
        },
        {
          "name": "Register for Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data._id) {",
                  "    pm.environment.set('registrationId', jsonData.data._id);",
                  "    console.log('✅ Registration ID saved: ' + jsonData.data._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"ticketType\": \"standard\",\n    \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registrations/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registrations", "register"]
            },
            "description": "Register for an event"
          }
        },
        {
          "name": "Get Registration By ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/registrations/{{registrationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registrations", "{{registrationId}}"]
            },
            "description": "Retrieve details about a specific registration"
          }
        },
        {
          "name": "Cancel Registration",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"cancelled\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/registrations/{{registrationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "registrations", "{{registrationId}}"]
            },
            "description": "Cancel a registration"
          }
        }
      ]
    },
    {
      "name": "AWS S3 Image Upload",
      "description": "Endpoints for handling AWS S3 image uploads",
      "item": [
        {
          "name": "1. Upload User Photo to S3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains expected properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('imageUrl').that.is.a('string');",
                  "    pm.expect(jsonData).to.have.property('message', 'Image uploaded successfully');",
                  "    ",
                  "    // Store the image URL for subsequent requests",
                  "    if (jsonData.imageUrl) {",
                  "        pm.environment.set('uploaded_image_url', jsonData.imageUrl);",
                  "        console.log(\"✅ Image URL saved: \" + jsonData.imageUrl);",
                  "    }",
                  "",
                  "    if (jsonData.key) {",
                  "        pm.environment.set('image_key', jsonData.key);",
                  "        console.log(\"✅ Image key saved: \" + jsonData.key);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "image",
                  "type": "file",
                  "src": "/path/to/test_image.jpg"
                },
                {
                  "key": "userId",
                  "value": "{{user_id}}",
                  "type": "text"
                },
                {
                  "key": "fullname",
                  "value": "Test User Name",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/upload-image",
              "host": ["{{baseUrl}}"],
              "path": ["api", "upload-image"]
            },
            "description": "Upload an image to AWS S3"
          }
        },
        {
          "name": "2. Get Uploaded Image Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains uploaded image information\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('hasUploadedImage');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    ",
                  "    // If there's an image, check its details",
                  "    if (jsonData.hasUploadedImage) {",
                  "        pm.expect(jsonData).to.have.property('imageUrl').that.is.a('string');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/get-image-status/{{user_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "get-image-status", "{{user_id}}"]
            },
            "description": "Check if a user has already uploaded an image"
          }
        },
        {
          "name": "3. Generate Signed URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains signed URL\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('url').that.is.a('string');",
                  "    pm.expect(jsonData).to.have.property('message', 'Signed URL generated successfully');",
                  "    ",
                  "    // Store the signed URL for subsequent requests",
                  "    if (jsonData.url) {",
                  "        pm.environment.set('signed_url', jsonData.url);",
                  "        console.log(\"✅ Signed URL saved: \" + jsonData.url);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/generate-signed-url/{{user_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "generate-signed-url", "{{user_id}}"]
            },
            "description": "Generate a signed URL for accessing an S3 image"
          }
        },
        {
          "name": "4. Access Image via Signed URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Image is accessible\", function() {",
                  "    pm.response.to.have.status(200);",
                  "    ",
                  "    // Check if response is an image",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{signed_url}}",
              "host": ["{{signed_url}}"]
            },
            "description": "Access the image via the signed URL"
          }
        },
        {
          "name": "5. Delete User Image",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates successful deletion\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('message').that.includes('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/delete-image/{{user_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "delete-image", "{{user_id}}"]
            },
            "description": "Delete a user's uploaded image"
          }
        },
        {
          "name": "6. Verify Image Deletion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User has no uploaded image\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('hasUploadedImage', false);",
                  "    pm.expect(jsonData).to.not.have.property('imageUrl');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/get-image-status/{{user_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "get-image-status", "{{user_id}}"]
            },
            "description": "Verify that the image was successfully deleted"
          }
        }
      ]
    },
    {
      "name": "Tickets",
      "description": "Endpoints for managing tickets",
      "item": [
        {
          "name": "Get Tickets for Event",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tickets/event/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tickets", "event", "{{eventId}}"]
            },
            "description": "Retrieve tickets for a specific event"
          }
        },
        {
          "name": "Create Ticket (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data._id) {",
                  "    pm.environment.set('ticketId', jsonData.data._id);",
                  "    console.log('✅ Ticket ID saved: ' + jsonData.data._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"event\": \"{{eventId}}\",\n    \"type\": \"standard\",\n    \"price\": 25,\n    \"quantity\": 100,\n    \"description\": \"Standard entry ticket\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tickets",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tickets"]
            },
            "description": "Create a new ticket type for an event (admin only)"
          }
        },
        {
          "name": "Get My Tickets",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tickets/my-tickets",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tickets", "my-tickets"]
            },
            "description": "Retrieve all tickets purchased by the logged-in user"
          }
        }
      ]
    },
    {
      "name": "Feedback",
      "description": "Endpoints for managing event feedback",
      "item": [
        {
          "name": "Submit Feedback",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data._id) {",
                  "    pm.environment.set('feedbackId', jsonData.data._id);",
                  "    console.log('✅ Feedback ID saved: ' + jsonData.data._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"eventId\": \"{{eventId}}\",\n    \"rating\": 5,\n    \"comment\": \"This was an amazing event!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/feedback",
              "host": ["{{baseUrl}}"],
              "path": ["api", "feedback"]
            },
            "description": "Submit feedback for an event"
          }
        },
        {
          "name": "Get Feedback for Event",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/feedback/event/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "feedback", "event", "{{eventId}}"]
            },
            "description": "Retrieve all feedback for a specific event"
          }
        },
        {
          "name": "Get My Feedback",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/feedback/my-feedback",
              "host": ["{{baseUrl}}"],
              "path": ["api", "feedback", "my-feedback"]
            },
            "description": "Retrieve all feedback submitted by the logged-in user"
          }
        }
      ]
    },
    {
      "name": "Admin",
      "description": "Admin-specific endpoints",
      "item": [
        {
          "name": "Get All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "users"]
            },
            "description": "Retrieve all users (admin only)"
          }
        },
        {
          "name": "Get All Registrations (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/registrations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "registrations"]
            },
            "description": "Retrieve all registrations (admin only)"
          }
        },
        {
          "name": "Get Dashboard Stats (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/admin/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "dashboard"]
            },
            "description": "Retrieve dashboard statistics (admin only)"
          }
        }
      ]
    },
    {
      "name": "Health Checks",
      "description": "API health check endpoints",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Check if the API is running"
          }
        },
        {
          "name": "AWS Status Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/aws-status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "aws-status"]
            },
            "description": "Check the status of AWS services"
          }
        },
        {
          "name": "API Debug Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/debug",
              "host": ["{{baseUrl}}"],
              "path": ["api", "debug"]
            },
            "description": "Get API debug information"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// You can add pre-request scripts here that will run before every request"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test scripts can be added here"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "description": "Base URL for the API server. Change to your Vercel deployment URL for production testing."
    },
    {
      "key": "test_user_id",
      "value": "test123",
      "description": "Test user ID for AWS S3 operations"
    },
    {
      "key": "adminEmail",
      "value": "admin@example.com",
      "description": "Admin email for authentication"
    },
    {
      "key": "adminPassword",
      "value": "admin123",
      "description": "Admin password for authentication"
    },
    {
      "key": "userToken",
      "value": "",
      "description": "JWT token for regular user authentication"
    },
    {
      "key": "adminToken",
      "value": "",
      "description": "JWT token for admin authentication"
    },
    {
      "key": "userId",
      "value": "",
      "description": "ID of the logged-in user"
    },
    {
      "key": "adminId",
      "value": "",
      "description": "ID of the admin user"
    },
    {
      "key": "eventId",
      "value": "",
      "description": "ID of a test event"
    },
    {
      "key": "organizerId",
      "value": "",
      "description": "ID of a test organizer"
    },
    {
      "key": "registrationId",
      "value": "",
      "description": "ID of a test registration"
    },
    {
      "key": "ticketId",
      "value": "",
      "description": "ID of a test ticket"
    },
    {
      "key": "feedbackId",
      "value": "",
      "description": "ID of test feedback"
    },
    {
      "key": "jwt_token",
      "value": "",
      "description": "JWT token for AWS S3 operations"
    },
    {
      "key": "user_id",
      "value": "",
      "description": "User ID for AWS S3 operations"
    },
    {
      "key": "uploaded_image_url",
      "value": "",
      "description": "URL of an uploaded image"
    },
    {
      "key": "image_key",
      "value": "",
      "description": "Key of an uploaded image in S3"
    },
    {
      "key": "signed_url",
      "value": "",
      "description": "Signed URL for accessing an image in S3"
    }
  ]
}
